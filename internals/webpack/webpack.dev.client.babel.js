/**
 * DEVELOPMENT WEBPACK CONFIGURATION - CLIENT CONFIGURATION
 */

const fs = require('fs');
const glob = require('glob');
const path = require('path');

const webpack = require('webpack');
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { ReactLoadablePlugin } = require('react-loadable/webpack');

// We don't want webpack to try resolving this during builds, use
// fs.readFileSync instead
const pkg = JSON.parse(
  fs.readFileSync(path.resolve(process.cwd(), 'package.json')),
);
const { dllPlugin } = pkg;

const config = require('./webpack.dev.babel.js')({
  // Add hot reloading in development
  entry: [
    'eventsource-polyfill', // Necessary for hot reloading with IE
    'webpack-hot-middleware/client?reload=true',
    path.join(process.cwd(), 'app/client.js'), // Start with js/app.js
  ],

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
  },
});

config.plugins.push.apply(config.plugins, [
  new webpack.ProvidePlugin({
    // make fetch available
    fetch: 'exports-loader?self.fetch!whatwg-fetch',
  }),
  new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
  new HtmlWebpackPlugin({
    inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
    template: 'app/index.html',
  }),
  new ReactLoadablePlugin({
    filename: './build/react-loadable.json',
  }),
]);

if (dllPlugin) {
  glob.sync(`${dllPlugin.path}/*.dll.js`).forEach(dllPath => {
    config.plugins.push.apply(config.plugins, [
      new AddAssetHtmlPlugin({
        filepath: dllPath,
        includeSourcemap: false,
      }),
    ]);
  });
}

config.plugins.push.apply(config.plugins, [
  new ReactLoadablePlugin({
    filename: './build/react-loadable.json',
  }),
]);

module.exports = config;
